/*
 * Nordigen Account Information Services API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0 (v2)
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package nordigen

import (
	"encoding/json"
	"net/http"
	"strings"

)

// TokenApiController binds http requests to an api service and writes the service results to the http response
type TokenApiController struct {
	service      TokenApiServicer
	errorHandler ErrorHandler
}

// TokenApiOption for how the controller is set up.
type TokenApiOption func(*TokenApiController)

// WithTokenApiErrorHandler inject ErrorHandler into controller
func WithTokenApiErrorHandler(h ErrorHandler) TokenApiOption {
	return func(c *TokenApiController) {
		c.errorHandler = h
	}
}

// NewTokenApiController creates a default api controller
func NewTokenApiController(s TokenApiServicer, opts ...TokenApiOption) Router {
	controller := &TokenApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all of the api route for the TokenApiController
func (c *TokenApiController) Routes() Routes {
	return Routes{ 
		{
			"JWTObtain",
			strings.ToUpper("Post"),
			"/api/v2/token/new/",
			c.JWTObtain,
		},
		{
			"JWTRefresh",
			strings.ToUpper("Post"),
			"/api/v2/token/refresh/",
			c.JWTRefresh,
		},
	}
}

// JWTObtain - 
func (c *TokenApiController) JWTObtain(w http.ResponseWriter, r *http.Request) {
	jwtObtainPairParam := JwtObtainPair{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&jwtObtainPairParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertJwtObtainPairRequired(jwtObtainPairParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.JWTObtain(r.Context(), jwtObtainPairParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// JWTRefresh - 
func (c *TokenApiController) JWTRefresh(w http.ResponseWriter, r *http.Request) {
	jwtRefreshParam := JwtRefresh{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&jwtRefreshParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertJwtRefreshRequired(jwtRefreshParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.JWTRefresh(r.Context(), jwtRefreshParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
