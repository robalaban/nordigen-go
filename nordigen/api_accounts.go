/*
 * Nordigen Account Information Services API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0 (v2)
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package nordigen

import (
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// AccountsApiController binds http requests to an api service and writes the service results to the http response
type AccountsApiController struct {
	service      AccountsApiServicer
	errorHandler ErrorHandler
}

// AccountsApiOption for how the controller is set up.
type AccountsApiOption func(*AccountsApiController)

// WithAccountsApiErrorHandler inject ErrorHandler into controller
func WithAccountsApiErrorHandler(h ErrorHandler) AccountsApiOption {
	return func(c *AccountsApiController) {
		c.errorHandler = h
	}
}

// NewAccountsApiController creates a default api controller
func NewAccountsApiController(s AccountsApiServicer, opts ...AccountsApiOption) Router {
	controller := &AccountsApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all of the api route for the AccountsApiController
func (c *AccountsApiController) Routes() Routes {
	return Routes{ 
		{
			"RetrieveAccountBalances",
			strings.ToUpper("Get"),
			"/api/v2/accounts/{id}/balances/",
			c.RetrieveAccountBalances,
		},
		{
			"RetrieveAccountDetails",
			strings.ToUpper("Get"),
			"/api/v2/accounts/{id}/details/",
			c.RetrieveAccountDetails,
		},
		{
			"RetrieveAccountMetadata",
			strings.ToUpper("Get"),
			"/api/v2/accounts/{id}/",
			c.RetrieveAccountMetadata,
		},
		{
			"RetrieveAccountTransactions",
			strings.ToUpper("Get"),
			"/api/v2/accounts/{id}/transactions/",
			c.RetrieveAccountTransactions,
		},
	}
}

// RetrieveAccountBalances - 
func (c *AccountsApiController) RetrieveAccountBalances(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	
	result, err := c.service.RetrieveAccountBalances(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// RetrieveAccountDetails - 
func (c *AccountsApiController) RetrieveAccountDetails(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	
	result, err := c.service.RetrieveAccountDetails(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// RetrieveAccountMetadata - 
func (c *AccountsApiController) RetrieveAccountMetadata(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	
	result, err := c.service.RetrieveAccountMetadata(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// RetrieveAccountTransactions - 
func (c *AccountsApiController) RetrieveAccountTransactions(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	
	result, err := c.service.RetrieveAccountTransactions(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
