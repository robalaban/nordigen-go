/*
 * Nordigen Account Information Services API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0 (v2)
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package nordigen

import (
	"time"
)

// EndUserAgreement - EndUserAgreement.
type EndUserAgreement struct {

	// The ID of this End User Agreement, used to refer to this end user agreement in other API calls.
	Id string `json:"id,omitempty"`

	// The date & time at which the end user agreement was created.
	Created time.Time `json:"created,omitempty"`

	// Maximum number of days of transaction data to retrieve.
	MaxHistoricalDays int32 `json:"max_historical_days,omitempty"`

	// Number of days from acceptance that the access can be used.
	AccessValidForDays int32 `json:"access_valid_for_days,omitempty"`

	// Array containing one or several values of ['balances', 'details', 'transactions']
	AccessScope []string `json:"access_scope,omitempty"`

	// The date & time at which the end user accepted the agreement.
	Accepted *time.Time `json:"accepted,omitempty"`

	// an Institution ID for this EUA
	InstitutionId string `json:"institution_id"`
}

// AssertEndUserAgreementRequired checks if the required fields are not zero-ed
func AssertEndUserAgreementRequired(obj EndUserAgreement) error {
	elements := map[string]interface{}{
		"institution_id": obj.InstitutionId,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseEndUserAgreementRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of EndUserAgreement (e.g. [][]EndUserAgreement), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseEndUserAgreementRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aEndUserAgreement, ok := obj.(EndUserAgreement)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertEndUserAgreementRequired(aEndUserAgreement)
	})
}
