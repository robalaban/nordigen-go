/*
 * Nordigen Account Information Services API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0 (v2)
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// AgreementsApiController binds http requests to an api service and writes the service results to the http response
type AgreementsApiController struct {
	service AgreementsApiServicer
	errorHandler ErrorHandler
}

// AgreementsApiOption for how the controller is set up.
type AgreementsApiOption func(*AgreementsApiController)

// WithAgreementsApiErrorHandler inject ErrorHandler into controller
func WithAgreementsApiErrorHandler(h ErrorHandler) AgreementsApiOption {
	return func(c *AgreementsApiController) {
		c.errorHandler = h
	}
}

// NewAgreementsApiController creates a default api controller
func NewAgreementsApiController(s AgreementsApiServicer, opts ...AgreementsApiOption) Router {
	controller := &AgreementsApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all of the api route for the AgreementsApiController
func (c *AgreementsApiController) Routes() Routes {
	return Routes{ 
		{
			"AcceptEUA",
			strings.ToUpper("Put"),
			"/api/v2/agreements/enduser/{id}/accept/",
			c.AcceptEUA,
		},
		{
			"CreateEUAV2",
			strings.ToUpper("Post"),
			"/api/v2/agreements/enduser/",
			c.CreateEUAV2,
		},
		{
			"DeleteEUAByIdV2",
			strings.ToUpper("Delete"),
			"/api/v2/agreements/enduser/{id}/",
			c.DeleteEUAByIdV2,
		},
		{
			"RetrieveAllEUAsForAnEndUserV2",
			strings.ToUpper("Get"),
			"/api/v2/agreements/enduser/",
			c.RetrieveAllEUAsForAnEndUserV2,
		},
		{
			"RetrieveEUAByIdV2",
			strings.ToUpper("Get"),
			"/api/v2/agreements/enduser/{id}/",
			c.RetrieveEUAByIdV2,
		},
	}
}

// AcceptEUA - 
func (c *AgreementsApiController) AcceptEUA(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	
	enduserAcceptanceDetailsParam := EnduserAcceptanceDetails{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&enduserAcceptanceDetailsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertEnduserAcceptanceDetailsRequired(enduserAcceptanceDetailsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AcceptEUA(r.Context(), idParam, enduserAcceptanceDetailsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// CreateEUAV2 - 
func (c *AgreementsApiController) CreateEUAV2(w http.ResponseWriter, r *http.Request) {
	endUserAgreementParam := EndUserAgreement{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&endUserAgreementParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertEndUserAgreementRequired(endUserAgreementParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateEUAV2(r.Context(), endUserAgreementParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DeleteEUAByIdV2 - 
func (c *AgreementsApiController) DeleteEUAByIdV2(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	
	result, err := c.service.DeleteEUAByIdV2(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// RetrieveAllEUAsForAnEndUserV2 - 
func (c *AgreementsApiController) RetrieveAllEUAsForAnEndUserV2(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	limitParam, err := parseInt32Parameter(query.Get("limit"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	offsetParam, err := parseInt32Parameter(query.Get("offset"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.RetrieveAllEUAsForAnEndUserV2(r.Context(), limitParam, offsetParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// RetrieveEUAByIdV2 - 
func (c *AgreementsApiController) RetrieveEUAByIdV2(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	
	result, err := c.service.RetrieveEUAByIdV2(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
