/*
 * Nordigen Account Information Services API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0 (v2)
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"net/http"
)



// AccountsApiRouter defines the required methods for binding the api requests to a responses for the AccountsApi
// The AccountsApiRouter implementation should parse necessary information from the http request,
// pass the data to a AccountsApiServicer to perform the required actions, then write the service results to the http response.
type AccountsApiRouter interface { 
	RetrieveAccountBalances(http.ResponseWriter, *http.Request)
	RetrieveAccountDetails(http.ResponseWriter, *http.Request)
	RetrieveAccountMetadata(http.ResponseWriter, *http.Request)
	RetrieveAccountTransactions(http.ResponseWriter, *http.Request)
}
// AgreementsApiRouter defines the required methods for binding the api requests to a responses for the AgreementsApi
// The AgreementsApiRouter implementation should parse necessary information from the http request,
// pass the data to a AgreementsApiServicer to perform the required actions, then write the service results to the http response.
type AgreementsApiRouter interface { 
	AcceptEUA(http.ResponseWriter, *http.Request)
	CreateEUAV2(http.ResponseWriter, *http.Request)
	DeleteEUAByIdV2(http.ResponseWriter, *http.Request)
	RetrieveAllEUAsForAnEndUserV2(http.ResponseWriter, *http.Request)
	RetrieveEUAByIdV2(http.ResponseWriter, *http.Request)
}
// InstitutionsApiRouter defines the required methods for binding the api requests to a responses for the InstitutionsApi
// The InstitutionsApiRouter implementation should parse necessary information from the http request,
// pass the data to a InstitutionsApiServicer to perform the required actions, then write the service results to the http response.
type InstitutionsApiRouter interface { 
	RetrieveAllSupportedInstitutionsInAGivenCountry(http.ResponseWriter, *http.Request)
	RetrieveInstitution(http.ResponseWriter, *http.Request)
}
// RequisitionsApiRouter defines the required methods for binding the api requests to a responses for the RequisitionsApi
// The RequisitionsApiRouter implementation should parse necessary information from the http request,
// pass the data to a RequisitionsApiServicer to perform the required actions, then write the service results to the http response.
type RequisitionsApiRouter interface { 
	DeleteRequisitionByIdV2(http.ResponseWriter, *http.Request)
	RequisitionById(http.ResponseWriter, *http.Request)
	RequisitionCreated(http.ResponseWriter, *http.Request)
	RetrieveAllRequisitions(http.ResponseWriter, *http.Request)
}
// TokenApiRouter defines the required methods for binding the api requests to a responses for the TokenApi
// The TokenApiRouter implementation should parse necessary information from the http request,
// pass the data to a TokenApiServicer to perform the required actions, then write the service results to the http response.
type TokenApiRouter interface { 
	JWTObtain(http.ResponseWriter, *http.Request)
	JWTRefresh(http.ResponseWriter, *http.Request)
}


// AccountsApiServicer defines the api actions for the AccountsApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type AccountsApiServicer interface { 
	RetrieveAccountBalances(context.Context, string) (ImplResponse, error)
	RetrieveAccountDetails(context.Context, string) (ImplResponse, error)
	RetrieveAccountMetadata(context.Context, string) (ImplResponse, error)
	RetrieveAccountTransactions(context.Context, string) (ImplResponse, error)
}


// AgreementsApiServicer defines the api actions for the AgreementsApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type AgreementsApiServicer interface { 
	AcceptEUA(context.Context, string, EnduserAcceptanceDetails) (ImplResponse, error)
	CreateEUAV2(context.Context, EndUserAgreement) (ImplResponse, error)
	DeleteEUAByIdV2(context.Context, string) (ImplResponse, error)
	RetrieveAllEUAsForAnEndUserV2(context.Context, int32, int32) (ImplResponse, error)
	RetrieveEUAByIdV2(context.Context, string) (ImplResponse, error)
}


// InstitutionsApiServicer defines the api actions for the InstitutionsApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type InstitutionsApiServicer interface { 
	RetrieveAllSupportedInstitutionsInAGivenCountry(context.Context, string) (ImplResponse, error)
	RetrieveInstitution(context.Context, string) (ImplResponse, error)
}


// RequisitionsApiServicer defines the api actions for the RequisitionsApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type RequisitionsApiServicer interface { 
	DeleteRequisitionByIdV2(context.Context, string) (ImplResponse, error)
	RequisitionById(context.Context, string) (ImplResponse, error)
	RequisitionCreated(context.Context, RequisitionV2) (ImplResponse, error)
	RetrieveAllRequisitions(context.Context, int32, int32) (ImplResponse, error)
}


// TokenApiServicer defines the api actions for the TokenApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type TokenApiServicer interface { 
	JWTObtain(context.Context, JwtObtainPair) (ImplResponse, error)
	JWTRefresh(context.Context, JwtRefresh) (ImplResponse, error)
}
