/*
 * Nordigen Account Information Services API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0 (v2)
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// RequisitionsApiController binds http requests to an api service and writes the service results to the http response
type RequisitionsApiController struct {
	service RequisitionsApiServicer
	errorHandler ErrorHandler
}

// RequisitionsApiOption for how the controller is set up.
type RequisitionsApiOption func(*RequisitionsApiController)

// WithRequisitionsApiErrorHandler inject ErrorHandler into controller
func WithRequisitionsApiErrorHandler(h ErrorHandler) RequisitionsApiOption {
	return func(c *RequisitionsApiController) {
		c.errorHandler = h
	}
}

// NewRequisitionsApiController creates a default api controller
func NewRequisitionsApiController(s RequisitionsApiServicer, opts ...RequisitionsApiOption) Router {
	controller := &RequisitionsApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all of the api route for the RequisitionsApiController
func (c *RequisitionsApiController) Routes() Routes {
	return Routes{ 
		{
			"DeleteRequisitionByIdV2",
			strings.ToUpper("Delete"),
			"/api/v2/requisitions/{id}/",
			c.DeleteRequisitionByIdV2,
		},
		{
			"RequisitionById",
			strings.ToUpper("Get"),
			"/api/v2/requisitions/{id}/",
			c.RequisitionById,
		},
		{
			"RequisitionCreated",
			strings.ToUpper("Post"),
			"/api/v2/requisitions/",
			c.RequisitionCreated,
		},
		{
			"RetrieveAllRequisitions",
			strings.ToUpper("Get"),
			"/api/v2/requisitions/",
			c.RetrieveAllRequisitions,
		},
	}
}

// DeleteRequisitionByIdV2 - 
func (c *RequisitionsApiController) DeleteRequisitionByIdV2(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	
	result, err := c.service.DeleteRequisitionByIdV2(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// RequisitionById - 
func (c *RequisitionsApiController) RequisitionById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	
	result, err := c.service.RequisitionById(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// RequisitionCreated - 
func (c *RequisitionsApiController) RequisitionCreated(w http.ResponseWriter, r *http.Request) {
	requisitionV2Param := RequisitionV2{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&requisitionV2Param); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRequisitionV2Required(requisitionV2Param); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RequisitionCreated(r.Context(), requisitionV2Param)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// RetrieveAllRequisitions - 
func (c *RequisitionsApiController) RetrieveAllRequisitions(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	limitParam, err := parseInt32Parameter(query.Get("limit"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	offsetParam, err := parseInt32Parameter(query.Get("offset"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.RetrieveAllRequisitions(r.Context(), limitParam, offsetParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
