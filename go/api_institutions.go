/*
 * Nordigen Account Information Services API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0 (v2)
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// InstitutionsApiController binds http requests to an api service and writes the service results to the http response
type InstitutionsApiController struct {
	service InstitutionsApiServicer
	errorHandler ErrorHandler
}

// InstitutionsApiOption for how the controller is set up.
type InstitutionsApiOption func(*InstitutionsApiController)

// WithInstitutionsApiErrorHandler inject ErrorHandler into controller
func WithInstitutionsApiErrorHandler(h ErrorHandler) InstitutionsApiOption {
	return func(c *InstitutionsApiController) {
		c.errorHandler = h
	}
}

// NewInstitutionsApiController creates a default api controller
func NewInstitutionsApiController(s InstitutionsApiServicer, opts ...InstitutionsApiOption) Router {
	controller := &InstitutionsApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all of the api route for the InstitutionsApiController
func (c *InstitutionsApiController) Routes() Routes {
	return Routes{ 
		{
			"RetrieveAllSupportedInstitutionsInAGivenCountry",
			strings.ToUpper("Get"),
			"/api/v2/institutions/",
			c.RetrieveAllSupportedInstitutionsInAGivenCountry,
		},
		{
			"RetrieveInstitution",
			strings.ToUpper("Get"),
			"/api/v2/institutions/{id}/",
			c.RetrieveInstitution,
		},
	}
}

// RetrieveAllSupportedInstitutionsInAGivenCountry - 
func (c *InstitutionsApiController) RetrieveAllSupportedInstitutionsInAGivenCountry(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	countryParam := query.Get("country")
	result, err := c.service.RetrieveAllSupportedInstitutionsInAGivenCountry(r.Context(), countryParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// RetrieveInstitution - 
func (c *InstitutionsApiController) RetrieveInstitution(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	
	result, err := c.service.RetrieveInstitution(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
